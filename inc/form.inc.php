<?php
/**
 * This file defines multiple HTML tags that can be completely or partially generated by RedSea to be included in an HTML form in a template.
 * @author Daniel Page <daniel@danielpage.com>
 * @copyright Copyright (c) 2021, Daniel Page
 * @license Licensed under the EUPL v1.2 - https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 * @todo The form processing elements currently only generate code for input, label, select, option, textarea, button.
 * 
 * The code does not generate form, fieldset, legend, optgroup, datalist or output tags. Currently these will need to be hardcoded in your model.
 */

 namespace RedSea;

/** The HTML input tag is one of the most complex given it has multiple uses and can display in multiple ways and
 * has multiple uses.
 * As such, a lot of this classe's methods will use a factory method to validate the values expected for the
 * different attributes.
 * The render method will take the string, int and boolean values set by the setter methods and generate HTML
 * output. Almost every setter has a corresponding getter, except for the input type attribute, as this is
 * specified directly to the constructor when the class is instanciated.
 */
class input {
    
    /**
    * Defines a trait that is used by all HTML classes working around inheritance problems
    * @internal
    */
    use commonHtmlProperties;

    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    protected $tagAttrArray = array(
        'accept' => array( 0 => null, 1 => 'str'),
        'autocomplete' => array(0 => null, 1 => 'str'),
        'autofocus' => array(0 => null, 1 => 'bool'),
        'checked' => array(0 => null, 1 => 'bool'),
        'disabled' => array(0 => null, 1 => 'bool'),
        'dirname' => array(0 => null, 1 => 'str'),
        'form' => array(0 => null, 1 => 'str'),
        'formaction' => array(0 => null, 1 => 'str'),
        'formenct' => array(0 => null, 1 => 'str'),
        'formmethod' => array(0 => null, 1 => 'str'),
        'formnovalidate' => array(0 => null, 1 => 'str'),
        'formtarget' => array(0 => null, 1 => 'str'),
        'list' => array(0 => null, 1 => 'str'),
        'max' => array(0 => null, 1 => 'int'),
        'maxlength' => array(0 => null, 1 => 'int'),
        'min' => array(0 => null, 1 => 'int'),
        'minength' => array(0 => null, 1 => 'int'),
        'multiple' => array(0 => null, 1 => 'bool'),
        'name' => array(0 => null, 1 => 'str'),
        'pattern' => array(0 => null, 1 => 'str'),
        'placeholder' => array(0 => null, 1 => 'str'),
        'readonly' => array(0 => null, 1 => 'bool'),
        'required' => array(0 => null, 1 => 'bool'),
        'size' => array(0 => null, 1 => 'int'),
        'step' => array(0 => null, 1 => 'int'),
        'type' => array(0 => null, 1 => 'str'),
        'value' => array(0 => null, 1 => 'str'),
    );

    /** 
     * Valid values for the "type" attributes
    */
    protected $inputTypeArray = array('button',
    'checkbox',
    'color',
    'date',
    'datetime-local',
    'email',
    'file',
    'hidden',
    'image',
    'month',
    'number',
    'password',
    'radio',
    'range',
    'reset',
    'search',
    'submit',
    'tel',
    'text',
    'time',
    'url',
    'week');

    /**
     * Set up an input block. One or two variables are required depending on the input type.
     * @param string $inputType Type of the input tag. Input type will be converted to lower case internally.
     * NOTE: You should set the ID for this tag and link it to an HTML label that references the same ID.
     * Valid input types are:
     * - button
     * - checkbox
     * - color
     * - date
     * - datetime-local
     * - email
     * - file
     * - hidden
     * - image
     * - month
     * - number
     * - password
     * - radio
     * - range
     * - reset
     * - search
     * - submit
     * - tel
     * - text
     * - time
     * - url
     * - week
     * if you generate an input tag belonging to one of the input types below:
     * - Text
     * - Checkbox
     * - Radio
     * - File
     * - Password
     * @return bool TRUE if successful, FALSE on error and error.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function __construct($inputType) {
        debug::flow();
        if(empty($inputType)) {
            debug::err("Input type is empty");
            return false;
        } else {
            $this->type('input');
            $inputType = strtolower($inputType);
            //Check if the selected input type exists:
            if(in_array($inputType, $this->inputTypeArray)) {
                $this->attribute('type', $inputType);
            } else {
                debug::err("Input type is not in the list of known types");
                return false;
            }
        }
        return true;
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
    public function render() {
        debug::flow();
        return $this->singleLineTagRender($this->type());
    }
}

/**
 * This class allows the creation of a label tag, to be associated with certain form elements such as radiobuttons.
 */
class label {
    
 /**
    * Defines a trait that is used by all HTML classes working around inheritance problems
    * @internal
    */
    use commonHtmlProperties;

    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    protected $tagAttrArray = array(
        'for' => array( 0 => null, 1 => 'str'),
        'form' => array(0 => null, 1 => 'str')
    );

    /**
     * Will contain the text label to be displayed in the label, set by the constructor.
     * @internal
     */
    protected $displayValue = null;

    /**
     * The constructor can instanciate a full HTML label on it's own using at minimum the label value to be displayed.
     * As a label is designed to be linked to an HTML form or form element tag, and you can optionally set the ID value 
     * of both the tag and the form that the label is to be linked to.
     * The label tag can be bound to one of the following form elements:
     * input, select, textarea, button, fieldset, legend, datalist, output, option, optgroup. 
     * @param string $labelValue Text to display on the label in the rendered HTML page
     * @param string|null $boundControlID Optional ID of the form element that the label is related to. Default is NULL.
     * @param string|null $boundFormID Optional ID of the overall form that both the label, and if set the form element, belong to. Default is NULL.
     * @return bool TRUE if successful, FALSE on error and error.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function __construct($displayValue=null, $boundControlID=null, $boundFormID=null) {
        debug::flow();
        if(empty($displayValue)) {
            debug::err('No display value set for label');
            return false;
        } else {
            $this->type('label');
            $this->displayValue = $displayValue;
        }

        if(!empty($boundControlID)) {
            $this->attribute('for', $boundControlID);
        }

        if(!empty($boundFormID)) {
            $this->attribute('form', $boundControlID);
        }
        return true;
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
    public function render() {
        debug::flow();
        return $this->singleLineTagRender($this->type(), $this->displayValue);
    }

}

/**
 * This class allows the creation of a select tag and associated option values (option values can be created seperately if they are 
 * to be inserted as a template placeholder inside an existing select tag in a form).
 */
class select {
    
    /**
    * Defines a trait that is used by all HTML classes working around inheritance problems
    * @internal
    */
    use commonHtmlProperties;
    
    /**
     * A select box in HTML displays a series of option objects that have been created
     * and stored in it. This array stores those either select objects where full objects are added
     * or simple select options if it does not contain a fully parameterd object..
     * @internal
     */
    private $optionArray = array();
    
    /**
     * This flag defines if the tag should be completely output.
     * If True, a full select tag will be generated, ie: <select> followed by options </select>
     * If False, only the code for the option tags will be generated, and the select tags
     * will be ignored (generally because the option tag itself is already present in the template 
     * model and the option tags generated will be used to replace a placeholder in that template).
     * It is set by the constructor and used later by the render method.
     * @internal
     */
    private $outputFullTag = false;

    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    protected $tagAttrArray = array(
        'autofocus' => array( 0 => null, 1 => 'bool'),
        'disabled' => array( 0 => null, 1 => 'bool'),
        'form' => array( 0 => null, 1 => 'str'),
        'multiple' => array( 0 => null, 1 => 'bool'),
        'name' => array( 0 => null, 1 => 'str'),
        'required' => array( 0 => null, 1 => 'bool'),
        'size' => array( 0 => null, 1 => 'int')
    );

    /**
    * Sets up the class. Requires a flag to indicate if the class needs to generate a full HTML
    * <select> tag and contents, or just the contents of the tag to be added to an existing tag in an HTML page.
    * @param bool $outputFullTag if TRUE, the full HTML code from <select> to </select>. If FALSE, only the
    * contents of the select tag will be generated, but the <select> and </select> tags will be omitted.
    */
    public function __construct($outputFullTag=true)
    {
        debug::flow();
        $this->type('select');
        $this->outputFullTag = true;
        if(!$outputFullTag) {
            $this->outputFullTag = false;
        }
    }

    /**
     * Allows adding a simple option tag into the select object.
     * This is a simplified method that allows the creation of simple option tags inside the
     * select object that contain a display label, a corresponding value to be submitted
     * if the option is selected, and allows defining if the tag is selected or disabled.
     * This does not allow CSS styling, events or other attributes other than "selected" 
     * or "disabled".
     * It is also more memory friendly as it does not store a complete object but a
     * simple HTML string.
     * @param string $label Text label to display in the option tag
     * @param string $value Value to be set in the tag's value attribute. 
     * @param bool $isSelected If TRUE, the tag's selected attribute will be set. 
     * @param bool $isDisabled If TRUE, the tag's disabled attribute will be set
     * @return TRUE on success, FALSE on failure.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function quickAdd($label=null, $value=null, $isSelected=false, $isDisabled=false) {
        debug::flow();
        if(is_null($label)) {
            debug::err("No label to display");
            return false;
        } else {
            if($isSelected) {
                $selected = ' selected';
            } else {
                $selected = '';
            }
            if($isDisabled) {
                $disabled = ' disabled';
            } else {
                $disabled = '';
            }
            $this->optionArray[] = "<option value='{$value}'{$selected}{$disabled}>$label</option>";
        }
        return true;
    }

    /**
    * Add an option object to the select tag. This will be rendered as a selectable element inside the select tag
    * @param object $optionObject An instanciated RedSea 'option' object that has been set up for use.
    * @return bool TRUE on success, FALSE on failure.
    * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
     public function addOptionObject($optionObject) {
        if(!is_object($optionObject)) {
            debug::err("Method argument is not an object", $optionObject);
            return false;
        } else {
            if(($optionObject->type() == 'option')) {
                $this->optionArray[] = $optionObject;
                return true;
            } else {
                debug::err("Supplied object is not an option object", $optionObject->tagType);
                return false;
            } 
        }   
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
     public function render() {
        debug::flow();
        $optionString = null;
        foreach($this->optionArray as $option) {
            if(is_object($option)) {
                $optionString .= $option->render() . "\n";
            } else {
                $optionString .= $option . "\n";
            }
        }
        if($this->outputFullTag) {
            return $this->singleLineTagRender($this->type(), $optionString);
        } else {
            return $optionString;
        }
         
    }
}

/**
 * This class allows the creation of individual option tags, that can either be rendered stand-alone or be added into a select box to be rendered as a complete HTML widget.
*/
class option {
    
    use commonHtmlProperties;

    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    public $tagAttrArray = array(
        'label' => array( 0 => null, 1 => 'str'),
        'value' => array( 0 => null, 1 => 'str')
    );
    /**
     * The constructor allows you to display a basic set up option tag for use inside a select tag.
     * you can still access all the common methods that extends from the trait to customise events and common tags
     * @param string $optionDisplayValue Text value to display in the tag. This can be any value (including a blank string), but an error will be raised if this is a null value.
     * @param string $optionInnerValue Optional value to set on the tag's 'value' attribute that when selected will be sent back to a form handler on submission 
     * of the form that contains this element. If the value is null, it will be ignored.
     * @return bool TRUE if successful, FALSE on error and error can be obtained through getLastError.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function __construct($optionDisplayValue, $optionInnerValue=null) {
        debug::flow();
        if(is_null($optionDisplayValue)) {
            debug::err("option display value is null");
            return false;
        } else {
            $this->type('option');
            $this->optionDisplayValue = $optionDisplayValue;
            if(!empty($optionInnerValue)) {
                $this->attribute('value', $optionInnerValue);
            }
        }
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
     public function render() {
        debug::flow();
        return $this->singleLineTagRender($this->type(), $this->optionDisplayValue);
    }
}

/**
 * Generates a text area tag
 */
class textarea {
    
    use commonHtmlProperties;

    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    protected $tagAttrArray = array(
        'autofocus' => array( 0 => null, 1 => 'str'),
        'cols' => array( 0 => null, 1 => 'str'),
        'dirname' => array( 0 => null, 1 => 'str'),
        'disabled' => array( 0 => null, 1 => 'str'),
        'form' => array( 0 => null, 1 => 'str'),
        'maxlength' => array( 0 => null, 1 => 'str'),
        'name' => array( 0 => null, 1 => 'str'),
        'placeholder' => array( 0 => null, 1 => 'str'),
        'readonly' => array( 0 => null, 1 => 'str'),
        'rows' => array( 0 => null, 1 => 'str'),
        'required' => array( 0 => null, 1 => 'str'),
        'wrap' => array( 0 => null, 1 => 'str')
    );

    /**
     * The constructor allows you to set up a textarea tag
     * you can still access all the common methods that extends from the trait to customise events and common tags
     * @param string $tagName name of the tag that will be used on submission to a form handler.
     * @param string $tagTextValue Optional text value to display in the text area.
     * @return bool TRUE if successful, FALSE on error.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function __construct($tagName, $tagTextValue=null) {
        debug::flow();
        if(is_null($tagName)) {
            debug::err("Text area requires a name to be set in the tagName variable");
            return false;
        } else {
            $this->attribute('name', $tagName);
            $this->type('textarea');
            if(!empty($tagTextValue)) {
                $this->tagDisplayValue = $tagTextValue;
            }
            return true;
        }
    }

    /**
     * Set the display value inside the text area
     * @return string $txtValue Value to display inside the text area
     */
    public function setDisplayValue($textValue) {
        debug::flow();
        $this->tagDisplayValue = $textValue;
    }
    
    /**
     * Returns the currently set text value to be displayed inside the textarea tag as default text
     * @return string Currently set text to display
     */
    public function getDisplayValue() {
        debug::flow();
        return $this->tagDisplayValue;
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
     public function render() {
        debug::flow();
        return $this->singleLineTagRender($this->type(), $this->tagDisplayValue);
    }
}

/**
 * This class allows the creation of a button.
 * Note that even if the only obligatory value in the constructor is the text to display, you may also want to add a type attribute before rendering.
 */
class button {
    
    use commonHtmlProperties;
    
    /**
     * This is the list of tag specific attributes with their corresponding expected data types.
     * This is used internally by the library.
     * @internal
     */
    protected $tagAttrArray = array(
        'autofocus' => array( 0 => null, 1 => 'bool'),
        'disabled' => array( 0 => null, 1 => 'bool'),
        'form' => array( 0 => null, 1 => 'str'),
        'formaction' => array( 0 => null, 1 => 'str'),
        'formenctype' => array( 0 => null, 1 => 'str'),
        'formmethod' => array( 0 => null, 1 => 'str'),
        'formonvalidate' => array( 0 => null, 1 => 'bool'),
        'formtarget' => array( 0 => null, 1 => 'str'),
        'name' => array( 0 => null, 1 => 'str'),
        'type' => array( 0 => null, 1 => 'str')
    );

    /**
     * Class constructor. Requires at minimum one value - the text to display on the button.
     * @param string|null $buttonName Text to display on the rendered button
     * @return bool TRUE if successful, FALSE on error/
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function __construct($buttonName=null) {
        debug::flow();
        if(empty($buttonName)) {
            debug::err("No text to display on the button");
            return false;
        } else {
            $this->type('button');
            $this->tagDisplayValue = $buttonName;
            return true;
        }
    }

    /**
     * Return the HTML code for this tag
     * @return string HTML code for the specified tag.
     */
    public function render() {
        debug::flow();
        return $this->singleLineTagRender($this->type(), $this->tagDisplayValue);
    }
}

/**
 * Static class to be used internally by the form (or any) HTML tag generator.
 * This will allow attributes and events to be added into the tag classes when needed, but avoid having a full 
 * array list of all global attributes and events copied into every object if they are not needed. This will 
 * allow an "on-demand" creation of attribute and event data avoiding un-necessary procesisng for each attribute
 * and event that a tag class may use - but probably does not!
 * As a class defining static methods, this can be called without instanciation, optimising memory use
 * The downside is that, opposed to a trait, the class cannot know anything implicit about the parent class unless it has
 * been explicitly sent as an argument - probably a good thing as this enables less coupled code.
 */
class GlobalPropertiesAndAttributes { 

    /**
     * Last error returned by this class. This is different to the getLastError method in the debug class.
     * As a static class, this does not use the debug service trait.
     */
    public static $lastError = null;

    /**
     * Array of common standard HTML attributes with their expected data types.
     * This is used internally by the library.
     * @internal
     */
    private static $globalAttrArray = array(
        'accesskey' => array(0 => null, 1 => 'str'),
        'alt' => array(0 => null, 1 => 'str'),
        'class' => array(0 => null, 1 => 'str'),
        'contenteditable' => array(0 => null, 1 => 'str'),
        'dir' => array(0 => null, 1 => 'str'),
        'draggable' => array(0 => null, 1 => 'str'),
        'height' => array(0 => null, 1 => 'int'),
        'hidden' => array(0 => null, 1 => 'bool'),
        'id' => array(0 => null, 1 => 'str'),
        'lang' => array(0 => null, 1 => 'str'),
        'spellcheck' => array(0 => null, 1 => 'str'),
        'src' => array(0 => null, 1 => ''),
        'style' => array(0 => null, 1 => 'str'),
        'tabindex' => array(0 => null, 1 => 'str'),
        'title' => array(0 => null, 1 => 'str'),
        'translate' => array(0 => null, 1 => 'str'),
        'width' => array(0 => null, 1 => 'int')
    );

    /**
     * Array of all standard HTML events.
     * This is used internally by the library.
     * @internal
     */
    private static $globalEventArray = array(
        //window events
        'onafterprint' =>null,
        'onbeforeprint' =>null,
        'onbeforeunload' =>null,
        'onerror' =>null,
        'onhashchange' =>null,
        'onload' =>null,
        'onmessage' =>null,
        'onoffline' =>null,
        'ononline' =>null,
        'onpagehide' =>null,
        'onpageshow' =>null,
        'onpopstate' =>null,
        'onresize' =>null,
        'onstorage' =>null,
        'onunload' =>null,
        //Form events
        'onblur' =>null,
        'onchange' =>null,
        'oncontextmenu' =>null,
        'onfocus' =>null,
        'oninput' =>null,
        'oninvalid' =>null,
        'onreset' =>null,
        'onsearch' =>null,
        'onselect' =>null,
        'onsubmit' =>null,
        //Keyboard events
        'onkeydown' =>null,
        'onkeypress' =>null,
        'onkeyup' =>null,
        //Mouse events
        'onclick' =>null,
        'ondblclick' =>null,
        'onmousedown' =>null,
        'onmousemove' =>null,
        'onmouseout' =>null,
        'onmouseover' =>null,
        'onmouseup' =>null,
        'onmousewheel' =>null,
        'onwheel' =>null,
        'ondrag' =>null,
        'ondragend' =>null,
        'ondragenter' =>null,
        'ondragleave' =>null,
        'ondragover' =>null,
        'ondragstart' =>null,
        'ondrop' =>null,
        'onscroll' =>null,
        'oncopy' =>null,
        'oncut' =>null,
        'onpaste' =>null,
        //media related
        'onabort' =>null,
        'oncanplay' =>null,
        'oncanplaythrough' =>null,
        'oncuechange' =>null,
        'ondurationchange' =>null,
        'onemptied' =>null,
        'onended' =>null,
        'onerror' =>null,
        'onloadeddata' =>null,
        'onloadedmetadata' =>null,
        'onloadstart' =>null,
        'onpause' =>null,
        'onplay' =>null,
        'onplaying' =>null,
        'onprogress' =>null,
        'onratechange' =>null,
        'onseeked' =>null,
        'onseeking' =>null,
        'onstalled' =>null,
        'onsuspend' =>null,
        'ontimeupdate' =>null,
        'onvolumechange' =>null,
        'onwaiting' =>null,
        // Details tag event
        'ontoggle' =>null
    );

    /**
     * Checks an attribute for coherency against the global attribute list and a class's custom attribute list.
     * If the attribute matches, returns an array to be loaded into the class's processable attribute list.
     * @param string $name Attribute name to set. This attribute must be in the global attribute list or in
     * the tag specific array if set.
     * @param mixed $value Value to set. The value must match the type set in the tag global or specific array list
     * @param array|null Tag specific array if the tag has specific attributes in addition to the global ones.
     * @return array|bool Array containing the set value or false if the array element is not found or not valid.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     * @internal
     */
    public static function validateAndSetAttribute($name, $value, $tagSpecificArray = null) {
        debug::flow();
        if(empty($name)) {
            debug::err("No attribute name specified");
            return false;
        } else {
            //Make sure the tag name is lower case as this is how all the tags are named internally.
            $name = strtolower($name);

            //Find out where the attribute exists, and extract the corresponding data array element.
            $keyArrayElement = null;
            if(array_key_exists($name, self::$globalAttrArray)) {
                $keyArrayElement = self::$globalAttrArray[$name];
            } elseif(array_key_exists($name, $tagSpecificArray)) {
                $keyArrayElement = $tagSpecificArray[$name];
            } else {
                debug::err("Non existing tag");
                return false;
            }

            //Validate that the value's value matches the expected value for that name
            $isExpectedValue = false;
            if(is_null($value)) {
                //Set the flag and continue.
                $isExpectedValue = true;
            } else {
                //We need to validate the actual value matches the specified type for the attribute
                switch($keyArrayElement[1]) {
                    case "int":
                        if(is_integer($value)) {
                            $isExpectedValue = true;
                        }
                        break;
                    case "bool":
                        if(is_bool($value)) {
                            $isExpectedValue = true;
                        }
                        break;
                    case "str":
                        if(is_string("$value")) {
                            $value = str_replace('"', "&quot;", $value);
                            $isExpectedValue = true;
                        }
                        break;
                    case "null":
                        if(is_null($value)) {
                            $isExpectedValue = true;
                        }
                        break;
                }
            }

            //Do we have a value that matches the expected type?
            if($isExpectedValue) {
                $keyArrayElement[0] = $value;
                return $keyArrayElement;
            } else {
                debug::err("Value does not match expected type");
                return false;
            }
        }
    }

    /**
     * Checks and returns an event value array to be used in a tag against the list.
     * @param string $name Event name to set. If the event name does not match a known event in the list,
     * the method will return false
     * @param string $value Event value to set.
     * @return array|bool Array containing the set event value or false if the array element is not found.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     * @internal
     * This is a public static function but it is only used internally as a single standalone 
     * method to avoid code bloat if it was included as a trait.
     */
    public static function validateAndSetEvent($name, $value) {
        debug::flow();
        if(empty($name)) {
            debug::err("Event name not sent");
            return false;
        } else {
            $name = strtolower($name);
            $value = str_replace('"', "&quot;", $value);
            if(array_key_exists($name, self::$globalEventArray)) {
                return $value;
            } else {
                //Non existing tag
                debug::err("Event type not recognised", $name);
                return false;
            }
        }
    }
}

/** Defines common HTML tag attributes that most HTML elements share.
 * This class will be inherited by RedSea managed HTML tag classes.
 * For attributes and values see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes and the
 * associated help per HTML tag to see specific attributes. 
 * For events, see https://www.w3schools.com/tags/ref_eventattributes.asp.
 * @todo : Add helper methods to the HTML library (or an extra HTML helper library) that can explicity set the valid
 * attributes and / or events per tag - this could be referenced as a stand-alone trait to be added to the
 * RedSea tag classes if required, rather than letting the dev look up the elements they need to set themselves.
*/
trait commonHtmlProperties {

    /**
     * This is part of the common internal data structure defining the class type.
     * It will be set by the corresponding constructor via the type method.
     * @internal
     */
    protected $tagType = null;

    /**
     * Some tags can display text. This will be generally set by the class constructor.
     * @internal
     */
    protected $tagDisplayValue = null;

    /**
     * Array containing all set attributes to render.
     * @internal
     */
    private $RenderAttributeArray = array();

    /**
     * Array containing all set Events to render
     * @internal
     */
    private $RenderEventArray = array();

    /**
     * Get or set a tag type for identification purposes. This is a getter/setter method.
     * @param string $tagType Type of tag to set:
     * - If Null, the current type of the tag is returned.
     * - If string, the value will be set as the current tag type if no other type is already set otherwise
     * @return string|bool 
     * - If $tagType is empty, then the method will return the current set value of of the tag
     * - If $tagType is set correctly the method will return TRUE
     * - If $tagType is not set correctly, the method will return FALSE.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     */
    public function type($tagType = null) {
        debug::flow();
        if(empty($tagType)) {
            return $this->tagType;
        } else {
            if(empty($this->tagType)) {
                //Allow setting the tag only if it's currently empty otherwise ignore.
                $this->tagType = $tagType;
                return true;
            } else {
                debug::err("Tag type is already set to {$this->tagType}. Cannot set to $tagType");
                return false;
            }
        }
    }

    /**
     * Get or set a tag object's attributes. This is a getter/setter method.
     * If an attribute name is set but not the event value, the method will return the current attribute value, if set.
     * If there is no attribute set, the method will return FALSE.
     * This is set as a trait as it requires direct access to the object's own internal structure to avoid code duplication.
     * @todo We have boolean values set as values: This is going to be a problem with the getters as you will not know if a value is supposed to be boolean or if it's not set at all!
     * To unset an attribute, send an empty string (not a null string) as the event value. Given that empty attributes will not do
     * anything on a tag, they will be removed from the list and will not be rendered.
     * @param string $attributeName Name of the attribute to get, set or unset. The event name must already exist as a valid event name as 
     * defined by the static method GlobalPropertiesAndAttributes::validateAndSetAttribute
     * @param string $attributeValue Value to set in the attribute.
     * - If the string is set to NULL, the method acts as a getter: it will return the value for the attribute if the name is valid
     * - If the string is set to empty string ("") the method acts as an "un"-setter, removing the event from the list of events
     * and the attribute will no longer be rendered in the object.
     * - If the string is set to any other value, the method acts as a setter, adding the event value to the object as long as 
     * the event exists as defined by GlobalPropertiesAndAttributes::validateAndSetAttribute
     * @return string|bool Depending on accessing this method as a getter or setter:
     * - Getter: Will return the value that corresponds to the attribute name, or FALSE if the value is not set or the name is invalid.
     * - Setter: Will return TRUE if the value was set, or FALSE if not. 
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     * @see GlobalPropertiesAndAttributes::validateAndSetEvent()
     * @see rsDebug::getLastError()
     */
    public function attribute($attributeName, $attributeValue=null) {
        debug::flow();
        if(is_null($attributeName)) {
            debug::err("Attribute name is not specified");
            return false;
        } else {
            if(is_null($attributeValue)) {
                debug::flow(__FUNCTION__ . ' running as Getter');
                $attributeName = strtolower($attributeName);
                //Check if the selected input type exists:
                if(array_key_exists($attributeName, $this->RenderAttributeArray)) {
                    return $this->tagAttrArray[$attributeName][0];
                } else {
                    debug::err("Attribute is not set");
                    return false;
                }
            } else {
                debug::flow(__FUNCTION__ . ' running as Setter');
                $validatedAttribute = GlobalPropertiesAndAttributes::validateAndSetAttribute($attributeName, $attributeValue, $this->tagAttrArray);  
                if($validatedAttribute !== false) {
                    // We have a valid value to add or update.
                    debug::flow("Adding validated attribute", $validatedAttribute);
                    $this->RenderAttributeArray[strtolower($attributeName)] = $validatedAttribute;
                } else {
                    //Something went wrong.
                    debug::err("Error getting attribute details", debug::$lastErrorMessage);
                }
            }
        }
    }

    /**
     * Get or set a tag object's events. This is a getter/setter method.
     * If an event name is set but not the event value, the method will return the current event value, if set.
     * If there is no event set, the method will return FALSE: As events are only actually strings internally, boolean false
     * is never a value that will actually be rendered.
     * To unset an event, send an empty string (not a null string) as the event value.
     * @param string $eventName Name of the event to get, set or unset. The event name must already exist as a valid event name as 
     * defined by the static method GlobalPropertiesAndAttributes::validateAndSetEvent
     * @param string $eventValue Value to set in the event.
     * - If the string is set to NULL, the method acts as a getter: it will return the value for the event if the name is valid
     * - If the string is set to empty string ("") the method acts as an "un"-setter, removing the event from the list of events
     * and the event will no longer be rendered in the object.
     * - If the string is set to any other value, the method acts as a setter, adding the event value to the object as long as 
     * the event exists as defined by GlobalPropertiesAndAttributes::validateAndSetEvent
     * @return string|bool Depending on accessing this method as a getter or setter:
     * - Getter: Will return the value that corresponds to the event name, or FALSE if the value is not set or the name is invalid.
     * - Setter: Will return TRUE if the value was set, or FALSE if not. 
     * If the method returns an error, the error.
     * In case of error, in addition to the above:
     * - The method itself will return FALSE
     * - The object's $errorFlag flag will be set to TRUE
     * - Error details can be obtained by calling the object's getLastError() method.
     * @see GlobalPropertiesAndAttributes::validateAndSetEvent()
     * @see rsDebug::getLastError()
     */
    public function event($eventName, $eventValue) {
        if(empty($eventName)) {
            debug::err("Event name is not specified");
            return false;
        } else {
            if(is_null($eventValue)) {
                debug::flow(__FUNCTION__ . ' running as Getter');
                $eventName = strtolower($eventName);
                //Check if the selected input type exists:
                if(array_key_exists($eventName, $this->RenderEventArray)) {
                    return $this->RenderEventArray[$eventName];
                } else {
                    debug::err("Event is not set");
                    return false;
                }
            } else {
                debug::flow(__FUNCTION__ . ' running as Setter');
                $validatedEvent = GlobalPropertiesAndAttributes::validateAndSetEvent($eventName, $eventValue);
                if($validatedEvent !== false) {
                    debug::flow("Adding validated event", $validatedEvent);
                    // We have a valid value to add or update.
                    $this->RenderEventArray[strtolower($eventName)] = $validatedEvent;
                    return true;
                } else {
                    //Something went wrong.
                    debug::err(GlobalPropertiesAndAttributes::$lastError);
                    return false;
                }
            }
        }
    }

    /**
     * Common method to generate single line HTML tags.
     *  It is called from each class's render() method and will generate the full HTML of the tag, including attributes, events
     * and any content that needs to be set between the opening and closing parts of the tag.
     * @param string $tagName Name of the HTML tag to render
     * @param string|null $tagHasValue If the tag is not self closing and has a value to display (such as a label, a...) then
     * the data to display in the tag will be specified here.
     * @return string rendered single line HTML tag.
     * @internal
     */
    private function singleLineTagRender($tagName, $tagHasValue=null) {
        debug::flow();
        $commonProperties = null;
        $renderData = "<" . $tagName;
        // Generate the tag attributes.
        //foreach($this->tagAttrArray as $key => $value) {

        foreach($this->RenderAttributeArray as $key => $value) {
            if(!is_null($value[0])) {
                if($value[1] == 'bool') {
                    $renderData .= " $key";
                } else {
                    $renderData .= " $key=\"" . $value[0] . "\"";
                }
            }
        }

        //Generate the tag events.
        foreach($this->RenderEventArray as $key => $value) {
            if(!is_null($value)) {
                $renderData .= " $key=\"$value\"";
            }
        }
        $renderData .= ">";

        if(!empty($tagHasValue)) {
            $renderData .= $tagHasValue  . "</" . $tagName .">\n";
        }
        return $renderData;
    }
}
